[ApiController]
    [Route("api/[controller]")]
    public class OrderController : ControllerBase
    {
        [ApiController]
    [Route("api/[controller]")]
    public class OrderController : ControllerBase
    {
        private IConfiguration _configuration;

        public OrderController(IConfiguration configuration)
        {
            this._configuration = configuration;
        }
        [HttpPost]
        public async Task<IActionResult> Post([FromBody] Order Order)
        {
            string topicName = this._configuration["TopicName"];
            string message = JsonSerializer.Serialize(Order);
            return Ok(await ProcessOrder(topicName, message));

        }

        private async Task<string> ProcessOrder(string topicName,string message)
        {
            ProducerConfig Config = new ProducerConfig
            {
                BootstrapServers = this._configuration["BootStrapServer"],

                ClientId = Dns.GetHostName()

            };
            try
            {
                using (var producer = new ProducerBuilder
                <Null, string>(Config).Build())
                {
                    var result = await producer.ProduceAsync
                    (topicName, new Message<Null, string>
                    {
                        Value = message
                    });

                    Debug.WriteLine($"Delivery Timestamp:{ result.Timestamp.UtcDateTime}");
                    return await Task.FromResult($"Delivery Timestamp:{ result.Timestamp.UtcDateTime}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error occured: {ex.Message}");
            }

            return await Task.FromResult("Not Published.....");
        }
    }

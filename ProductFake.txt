internal class ProductFakeRepository : IProductRepository
    {
        private IList<Product> products;
        public ProductFakeRepository()
        {
            this.products = new List<Product>();
            products.Add(new Product
            {
                ProductId = 1,
                ProductDescription ={
                    ProductName = "Laptop",
                    UnitPrice = 100000,
                    BufferLevel = 10,
                    Description = "Electronics",
                    DOP= new DateTime(2022,2,2)
                }
                ,
                SupplierId = 12
            });
            products.Add(new Product
            {
                ProductId = 2,
                ProductDescription ={
                    ProductName = "TV",
                    UnitPrice = 40000,
                    BufferLevel = 20,
                    Description = "Electronics",
                    DOP= new DateTime(2022,2,12)
                }
                ,
                SupplierId = 1
            });
            products.Add(new Product
            {
                ProductId = 3,
                ProductDescription ={
                    ProductName = "Mobile",
                    UnitPrice = 250000,
                    BufferLevel = 10,
                    Description = "Electronics",
                    DOP= new DateTime(2022,2,14)
                }
                ,
                SupplierId = 14
            });
            
        }
        public Product AddProduct(Product Product)
        {
            this.products.Add(Product);
            return Product;
        }

        public void DeleteProduct(long ProductId)
        {
            var existing = this.products.First(p => p.ProductId == ProductId);
            this.products.Remove(existing);
        }

        public Product GetProduct(long ProductId)
        {
            return this.products.FirstOrDefault(product => product.ProductId == ProductId);
        }

        public IEnumerable<Product> GetProducts()
        {
            return this.products;
        }

        public Product UpdateProduct(Product Product)
        {
            throw new NotImplementedException();
        }
    }
